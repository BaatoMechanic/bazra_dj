# Generated by Django 4.2.7 on 2024-02-20 05:12

import autho.models.verification_code
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import shortuuidfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("permission", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("idx", shortuuidfield.fields.ShortUUIDField(blank=True, editable=False, max_length=22)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("is_obsolete", models.BooleanField(db_index=True, default=False)),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("email", models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ("phone", models.CharField(blank=True, max_length=16, null=True, unique=True)),
                (
                    "gender",
                    models.CharField(
                        choices=[("male", "Male"), ("female", "Female"), ("other", "Other")],
                        default="male",
                        max_length=20,
                    ),
                ),
                (
                    "auth_provider",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("mobile", "Mobile"),
                            ("google", "Google"),
                            ("facebook", "Facebook"),
                        ],
                        default="email",
                        max_length=50,
                    ),
                ),
                ("image", models.ImageField(blank=True, null=True, upload_to="users/profile")),
                ("is_phone_verified", models.BooleanField(default=False)),
                ("is_email_verified", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(db_index=True, default=False)),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("dob_type", models.CharField(choices=[("bs", "Bs"), ("ad", "Ad")], default="AD", max_length=2)),
                ("dob", models.DateField(blank=True, null=True)),
                ("verified_on", models.DateTimeField(blank=True, null=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "primary_role",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="permission.role"
                    ),
                ),
                ("roles", models.ManyToManyField(blank=True, related_name="users", to="permission.role")),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
        ),
        migrations.CreateModel(
            name="VerificationCode",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("idx", shortuuidfield.fields.ShortUUIDField(blank=True, editable=False, max_length=22)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("is_obsolete", models.BooleanField(db_index=True, default=False)),
                ("code", models.CharField(default="", max_length=6)),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("tries", models.PositiveIntegerField(default=0)),
                ("expires_on", models.DateTimeField(default=autho.models.verification_code.get_otp_expires_on)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="verification_code",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserLocation",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("idx", shortuuidfield.fields.ShortUUIDField(blank=True, editable=False, max_length=22)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("is_obsolete", models.BooleanField(db_index=True, default=False)),
                ("latitude", models.FloatField()),
                ("longitude", models.FloatField()),
                ("altitude", models.FloatField()),
                ("timestamp", models.DateTimeField()),
                ("accuracy", models.FloatField()),
                ("heading", models.FloatField()),
                ("speed", models.FloatField()),
                ("speed_accuracy", models.FloatField()),
                ("location_name", models.CharField(max_length=255)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="+", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserBlackList",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("idx", shortuuidfield.fields.ShortUUIDField(blank=True, editable=False, max_length=22)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("is_obsolete", models.BooleanField(db_index=True, default=False)),
                ("email", models.EmailField(blank=True, max_length=254, null=True, unique=True)),
                ("phone", models.CharField(max_length=16, unique=True)),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                ("modified_on", models.DateTimeField(auto_now=True)),
                ("removed_on", models.DateTimeField(auto_now=True)),
                ("is_removed", models.BooleanField(db_index=True, default=False)),
                ("remarks", models.CharField(max_length=150)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blacklist_creators",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blacklist_modifiers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "removed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="blacklist_removers",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MechanicTip",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("idx", shortuuidfield.fields.ShortUUIDField(blank=True, editable=False, max_length=22)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("modified_at", models.DateTimeField(auto_now=True)),
                ("is_obsolete", models.BooleanField(db_index=True, default=False)),
                ("tip", models.CharField(max_length=500)),
                (
                    "mechanic",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="mechanic_tips",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
